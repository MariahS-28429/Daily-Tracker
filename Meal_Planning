# Import 
import csv, json, sys, re, os
from typing import List, Dict, Any

#Classes
class Item():
    """
    Abstract base class for all items in the nutritional planner.
    Contains shared attributes like name, kcal, tags, ect., and mehtods for serialization
    """
    # Why:
        # Central abstraction fro Food, Recipe, etc.
        # Ensures consistent data structure.

    # Interactions:
        # Subclasses inherit from it.
        # Registry uses its data for saving/loading.
        # calculator and DayLog call methods like to_registry_dict.
    
    def __init__(self, item_name: str, item_type: str, sub_type: str, kcal: float, brand: str):
        """
        Initialize all attributes for an item. Autosaves the item to the registry upon initialization.

        Input: ('apple', 'food', 'non-ingredient', 95.0, 'Walmart'), etc.
        """

        self.name = CheckType.is_string(item_name).lower()
        self.item_type = CheckType.is_string(item_type).lower()
        self.sub_type = CheckType.is_string(sub_type).lower()
        self.kcal = CheckType.is_float(kcal)
        self.brand = CheckType.is_string(brand).lower()
        self.id = self.id_gen()

        self.tags = []
        self.time = 0.0
        self.data = {}
        self.makeup = []

        ItemRegistry.register_item(self.to_registry_dict())

    def id_gen(self):
        """
        Generate the lowest available unique ID for this item based on its type prefix.

        Ex: 'f001', 'r002', 'w003', 's004', etc.
        """

        prefix = self.item_type[0]
        summary = SummaryIndex.load_index()
        
        used_numbers = []
        for item in summary:
            if item['id'].startswith(prefix):
                num_part = item['id'][1:]
                if num_part.isdigit():
                    used_numbers.append(int(num_part))
        
        used_numbers.sort()
        next_num = 1
        for num in used_numbers:
            if num == next_num:
                next_num += 1
            else:
                break
        
        return f"{prefix}{next_num:03d}"

    def add_tags(self):
        pass
    
    def to_summary_dict(self) -> Dict[str, Any]:
        """
        Return a lightweight dict with ID and name for the summary index 
        """

        return {'id': self.id, 'name': self.name}
    
    def to_registry_dict(self):
        """
        Return a full dict of the item for serialization to registry.
        """
        
        return {
            'id': self.id,
            'name': self.name,
            'item_type': self.item_type,
            'sub_type': self.sub_type,
            'brand': self.brand,
            'kcal': self.kcal,
            'time': self.time,
            'data': self.data,
            'tags': self.tags,
            'makeup': self.makeup
        }

    def update_field(self, field_name, new_value):
        """
        Update an indivdual attribute of the item
        """
        pass

    @classmethod
    def from_dict(self):
        pass

    def auto_update_dependents():
        """
        Notify the registry to update all items (recipes/daylogs) that reference this item.
        """
        pass

    def __str__():
        pass

    def __repr__():
        pass

class Food(Item):
    """
    A basic food item with full nutritional data.
    Inherits from Item.
    """

    # Why:
        # Direct subclass with minimal change.
    
    def __init__(self, item_name: str, sub_type: str, kcal: float, tags: list, brand: str,
                 serving_size: float, serving_unit: str, servings: float, 
                 protein: float, carbs: float, total_fat: float, saturated_fat: float, trans_fat: float, 
                 cholesterol: float, sodium: float, fiber: float,
                 total_sugars: float, added_sugars: float,
                 vitamin_d: float, calcium: float, iron: float, potassium: float):    
        super().__init__(self, item_name, 'food', sub_type, kcal, tags, brand)
        self.data = {"serving_information": {
                        "serving_size": CheckType.is_float(serving_size),
                        "serving_unit": CheckType.is_string(serving_unit),
                        "servings": CheckType.is_float(servings)},
                    "nutrition": {
                        "macros": {
                            "protein": CheckType.is_float(protein),
                            "carbs": CheckType.is_float(carbs),
                            "fats": {
                                "total_fat": CheckType.is_float(total_fat),
                                "saturated_fat": CheckType.is_float(saturated_fat),
                                "trans_fat": CheckType.is_float(trans_fat)}},
                        "cholesterol": CheckType.is_float(cholesterol),
                        "sodium": CheckType.is_float(sodium),
                        "fiber": CheckType.is_float(fiber),
                        "sugars": {
                            "total_sugars": CheckType.is_float(total_sugars),
                            "added_sugars": CheckType.is_float(added_sugars)},
                        "vitamin_d": CheckType.is_float(vitamin_d),
                        "calcium": CheckType.is_float(calcium),
                        "iron": CheckType.is_float(iron),
                        "potassium": CheckType.is_float(potassium)}}
    
    def from_nutrition_label():
        """parse label into data"""
        pass

    def edit_macros():
        pass

class Recipe(Item):
    """
    A recipe composed of multiple food items, referenced by their IDs.
    """

    # Why:
        # Composed of Food IDs (ingredients)
        # Needs to auto-update if a food changes.

    # Interactions:
        # Calls NutritionalCalculator to total up nutrients.
        # Uses ItemRegistry to resolve Ids to actual Food items.

    def __init__(self):
        self.data = {"serving_information": {
                            "serving_size": 0.0,
                            "serving_unit": "",
                            "servings": 0.0},
                        "nutrition": {
                            "macros": {
                                "protein": 0.0,
                                "carbs": 0.0,
                                "fats": {
                                    "total_fat": 0.0,
                                    "saturated_fat": 0.0,
                                    "trans_fat": 0.0}},
                            "cholesterol": 0.0,
                            "sodium": 0.0,
                            "fiber": 0.0,
                            "sugars": {
                                "total_sugars": 0.0,
                                "added_sugars": 0.0},
                            "vitamin_d": 0.0,
                            "calcium": 0.0,
                            "iron": 0.0,
                            "potassium": 0.0}}
    
    def build_from_ingredients(list_of_food_ids):
        """
        Assign ingredient IDs to this recipe's makeup field.
        """
        pass

    def calculate_totals():
        """
        Calculate the total nutrition of this recipe using NutritionalCalculator.
        """
        pass

    def update_ingredient(food_id, new_food_id):
        """
        Replace one ingredient with another.
        """
        pass

    def update_on_food_change():
        """
        Recalculate totals if any ingredient has changed in the registry.
        """
        pass

    def recalculate():
        pass

class Workout(Item):
    """
    A workout session, which may consist of multiple steps.
    Steps are referenced by ID if available.
    """

    # Why:
        # Complex structre, may invovle substeps.
        # Needs support for calorie estimation if only summary info is available.

    # Interactions:
        # Calls NutritionalCalculator for calorie estimates.
        # Registry might help aggregate step data.

    def __init__(self, item_name, item_type, sub_type, kcal, tags, brand):
        super().__init__(item_name, item_type, sub_type, kcal, tags, brand)
    
    def add_steps(steps_ids):
        """
        Add smaller exercise steps to this workout.
        """
        pass
    
    def estimate_step_kcal():
        """
        Distribute known total kcal across steps proportionally.
        """
        pass
    
    def update_on_step_change():
        """
        Recalculate estimates if any step has changed in registry.
        """
        pass
    
    def recalculate():
        pass

class Supplement(Item):
    """
    A supplement item (e.g., vitamin) with possible brand and data feilds.
    """

    def __init__(self, item_name, item_type, sub_type, kcal, tags, brand):
        super().__init__(item_name, item_type, sub_type, kcal, tags, brand)
    
    def parse_label():
        pass

class CheckType():
    """
    Helper class for validating and prompting correct user input types.
    """

    # Why:
        # Keeps validation logit out of other classses.

    # Interactions:
        # Used by any class prompting user input.

    @staticmethod
    def is_string(value: str) -> str:
        """Ensures the value is a non-empty string. Prompts until valid."""
        while True:
            if isinstance(value, str) and value.strip():
                return value
            value = input(f"'{value}' is not a valid non-empty string. Please try again: ")

    @staticmethod
    def is_float(value) -> float:
        """Ensures the value is a float. Prompts until valid."""
        while True:
            try:
                return float(value)
            except ValueError:
                value = input(f"'{value}' is not a valid number. Please try again: ")
        
    @staticmethod
    def is_list(value) -> list:
        while not isinstance(value, list):
            try:
                return value.split(',')
            except:
                value = input(f"'{value}' is not a valid list. Please try again: ")
        return value            

class AdvancedSearch():
    """
    Search and filter functionality for all items in the registry.
    """

    # Why:
        # Powerful, felxible searching and sorting across tiem attributes.

    # Interactions:
        # Accesses ItemRegistry.items directly.
    
    def search_by_name(name):
        pass
    
    def search_by_tag(tag):
        pass
    
    def search_by_kcal(min, max):
        pass
    
    def search_by_type(item_type):
        pass
    
    def reverse_search(tag = None, brand = None):
        """Find items missing data"""
        pass
    
    def sort_results(results, key, reverse = False):
        pass
    
    def filter_items(predicate_fuction):
        """Allows custom filter logic"""
        pass

class NutritionalCalculator():
    """
    Utility class for calculating and aggregating nutritional data.
    """

    # Why:
        # Handles all nutrient math in one place.

    # Interactions:
        # Called by Recipe, DayLog, possibly Workout.
    
    def sum_nutrition(items: list[Item]):
        pass
    
    def adjust_amount(item: Item, factor: float):
        pass
    
    def calculate_recipe_totals(recipe: Recipe):
        pass
    
    def calculate_daylog_totals():
        pass

class Tutorial(): # Consider using a JSON docstring parser to auto-fill this
    """
    Provides structured guidance about app classes, methods, and tags.
    """

    # Why:
        # In-app help / documentation system.
    
    # Interactions:
        # Reads method docstrings or metadata about classes

    def list_classes():
        pass
    
    def list_methods(class_name):
        pass
    
    def describe_method(class_name, method_name):
        pass
    
    def list_tags():
        #List of possible tags: [
        # 'ingredient', 'breakfast', 'lunch', 'dinner', 'snack', 'drink', 'cooked', 'baked',
        # 'location_bread', 'location_fridge', 'location_freezer', 'location_baking', 'location_snack', 'location_lazy_susan', 'location_counter'
        # ]
        pass

class ItemRegistry():
    """
    Stores and manages all registered items.
    Automatically updates index and dependents when items change.
    """

    # Why:
        # Main source of truth. Holds all items.
        # Automatically updates dependents and syncs index.

    # Interactions:
        # Works with SummaryIndex, DayLog, ITem, and I/O.

    headers = ['id', 'name', 'item_type', 'sub_type', 'brand', 'kcal',
                  'time', 'data', 'makeup', 'tags']
    registry_file = "item_registry.csv"

    @classmethod
    def register_item(cls, row):
        registry = cls.load_registry()

        registry.append(row)

        cls.save_registry(registry)
    
    @classmethod
    def load_registry(cls) -> List[dict]:
        """
        Returns a list of all items and their attributes in the registry with each item row being a dictionary 
        with python objects for certian attributes.

        Output: [{'id': 't001', 'name': 'testing', 'item_type': 'testing', 'sub_type': '1', 'brand': '3', 'kcal': 2.0, 'time': 0.0, 'data': {}, 'makeup': [], 'tags': []}]
        """

        # Easily called to gain all information and parse through everything for any method that needs it.

        registry = []

        with open(cls.registry_file, 'r', newline='', encoding='utf-8') as f_in:
            reader = csv.DictReader(f_in)
            for row in reader:
                cleaned = {}

                for key, value in row.items():
                    value = value.strip()

                    # takes the list and dictionary attributes and codes them back into python objects
                    if key in ['data', 'makeup', 'tags']:
                        try:
                            cleaned[key] = json.loads(value) if value else {} if key == 'data' else []
                        except json.JSONDecodeError:
                            cleaned[key] = {} if key == 'data' else []

                    # takes the float attributes and codes them back into python objects
                    elif key in ['kcal', 'time']:
                        try:
                            cleaned[key] = float(value)
                        except ValueError:
                            cleaned[key] = 0.0

                    # everything else is just added back on, as is.
                    else:
                        cleaned[key] = value

                registry.append(cleaned)

        return registry
    
    @classmethod
    def save_registry(cls, registry: List[dict]):
        """
        Updates / saves the registry with the new and updated registry given to it. 
        Codes items with json so they can be converted back to python objects.

        Input: [{'id': 't001', 'name': 'testing', 'item_type': 'testing', 'sub_type': '1', 'brand': '3', 'kcal': 2.0, 'time': 0.0, 'data': {}, 'makeup': [], 'tags': []}, 
        {'id': 't002', 'name': 'testing', 'item_type': 'testing', 'sub_type': '1', 'brand': '3', 'kcal': 2.0, 'time': 0.0, 'data': {}, 'makeup': [], 'tags': []}]
        """

        with open(cls.registry_file, 'w', newline='', encoding='utf-8') as f_out:
            
            # if the registry is empty, don't save it.
            if not registry:
                return
            
            writer = csv.DictWriter(f_out, fieldnames=cls.headers)
            writer.writeheader()

            # codes some attributes to json for later conversions
            for item in registry:
                row = item.copy()
                for field in ['data', 'makeup', 'tags']:
                    row[field] = json.dumps(row.get(field, {} if field == 'data' else []))
                writer.writerow(row)
        
        SummaryIndex.save_index()
    
    
        pass
    
    @classmethod
    def resolve_id_by_name(cls, name: str) -> str | None:
        """
        Find the item ID based on a (possibly non-unique) item name.
        Returns the selected item ID, or None if not found/aborted.
        """

        matches = SummaryIndex.search_name(name)

        if not matches:
            print(f"No items found with name matching '{name}'.")
            return None

        if len(matches) == 1:
            return matches[0]['id']

        print(f"\nMultiple items found matching '{name}':")
        for i, item in enumerate(matches, 1):
            print(f"{i}. [{item['id']}] {item['brand']} {item['name']}")

        try:
            choice = int(input("Enter the number of the item: "))
            if 1 <= choice <= len(matches):
                return matches[choice - 1]['id']
            else:
                print("Invalid choice.")
        except ValueError:
            print("Invalid input.")

        return None
    
    @classmethod
    def delete_item(cls, item_name: str) -> bool:
        """
        Delete the item with the given ID from the registry.

        Returns True if an item was deleted, False if not found.

        Input: 't003', 'q200'
        Output: True, False
        """

        # checks the summary index for any matches to the item name given
        id = cls.resolve_id_by_name(item_name)
        if not id:
            return False
        
        registry = cls.load_registry()
        original_len = len(registry)

        # Finds the item row based on id
        item = cls.get_item(id)
        if not item:
            return False
        
        # Validates deletion with the user
        print(f"\nYou are about to delete the following item:")
        for key, value in item.items():
            print(f"  {key}: {value}")
        confirm = input("Are you sure you want to delete this item? (y/n): ").strip().lower()

        if confirm not in ('y', 'yes'):
            print("Deletion cancelled.")
            return False
        
        # Updates the registry by adding every row but the one with the chosen id
        updated_registry = [i for i in registry if i['id'] != id]    
        if len(updated_registry) == original_len:
            print(f"No item found with ID '{id}'.")
            return False
        cls.save_registry(updated_registry)
  
    @classmethod
    def update_field(cls, item_name: str, field_name: str, new_value) -> bool:
        """
        Let's a user change fields for items that already exist in the registry file.

        Returns True if a change was made, False if not.

        Input: ('testing', 'name', 'test')
        Output: True
        """

        # checks the summary index for any matches to the item name given
        if field_name not in cls.headers:
            print(f"'{field_name}' is not a valid field name.")
            return False
        
        # finds the id for the item
        id = cls.resolve_id_by_name(item_name)
        if not id:
            return False

        registry = ItemRegistry.load_registry()
        found = False

        # iterates over the registry until it finds the item and repalces the field's value.
        for item in registry:
            if item['id'] == id:
                item[field_name] = new_value
                found = True
                break
        
        if not found:
            print(f"Item with ID '{id}' not found in registry.")
            return False
        
        cls.save_registry(registry)
        return True

    @classmethod
    def get_item(cls, id):
        registry = cls.load_registry()
        return next((item for item in registry if item['id'] == id), None)
    
    @classmethod
    def instantiate_item(cls, item_dict):
        item_type = item_dict.get("item_type")

        item_classes = {
            "food": Food,
            "recipe": Recipe,
            "workout": Workout,
            "supplement": Supplement
        }

        klass = item_classes.get(item_type.lower())
        if not klass:
            raise ValueError(f"Unknown item type: {item_type}")

        return klass.from_dict(item_dict)
    
    @classmethod
    def update_dependents(cls, item_id):
        """
        Recalculates and updates any items that include this item_id in their makeup.
        """
        dependents = cls.get_items_using(item_id)
        if not dependents:
            return

        registry = cls.load_registry()
        updated = False

        for dependent in dependents:
            # Find the dependent row in registry by id
            for row in registry:
                if row['id'] == dependent['id']:
                    obj = cls.instantiate_item(row)
                    obj.recalculate()
                    row.update(obj.to_registry_dict())
                    updated = True
                    break

        if updated:
            cls.save_registry(registry)
      
    @classmethod
    def get_all_by_type(cls, item_type: str) -> List[dict]:
        """
        Purpose:
            Retrieve all items of a specific type, like all foods, all recipes, all workouts, or all supplements.
            Useful if you want to list or filter items by type for display, editing, or calculations.

        Why you need it:
            Imagine you want to show the user all “recipes” in the app or all “workouts” in a given view.
            It helps isolate subsets of items quickly without loading or filtering everything manually.
            Also useful in logic that applies differently depending on item type.
        """
        
        registry = cls.load_registry()
        item_type = item_type.lower()

        return [item for item in registry if item.get('item_type', '') == item_type]
 
    @classmethod
    def get_items_using(cls, item_id: str) -> List[dict]:
        """
        Returns a list of all items that include the given item_id in their makeup.

        Input: item_id like 'f001', 'r002', etc.
        Output: List of item dicts that reference this item in their makeup.
        """

        registry = cls.load_registry()
        items_using = []

        for item in registry:
            makeup = item.get('makeup', [])
            # Check if makeup is a list and if any part has matching 'id'
            if isinstance(makeup, list) and any(part.get('id') == item_id for part in makeup):
                items_using.append(item)

        return items_using

class SummaryIndex():
    """
    Provides a lightweight reference index of all item Ids and names.
    """
    # Why:
        # Allows quick ID <-> name lookups without reading entire registry.
    
    # Interactions:
        # Called by Registry and AdvancedSearch
    
    headers = ['id', 'name', 'brand']
    index_file = 'summary_index.csv'

    @classmethod
    def load_index(cls):
        """
        Return a list (or dictionary) of all items currently tracked in the summary index, likely read from a CSV file (which stores rows where each entry is a JSON string).
        """
        cls.save_index()

        index = []
        
        with open (cls.index_file, 'r', newline='', encoding='utf-8') as f_in:
            reader = csv.DictReader(f_in)
            for row in reader:
                index.append(row)

        return index
    
    @classmethod
    def save_index(cls):
        summary_data = []

        registry = ItemRegistry.load_registry()

        for row in registry:
            summary_data.append({
                'id': row.get('id', ''),
                'name': row.get('name', ''),
                'brand': row.get('brand', '')
            })

        with open (cls.index_file, 'w', newline='', encoding='utf-8') as f_out:
            writer = csv.DictWriter(f_out, fieldnames=cls.headers)
            writer.writeheader()
            writer.writerows(summary_data)
    
    def update_entry(item):
        pass
    
    def delete_entry(item_id):
        pass
    
    @classmethod
    def search_name(cls, query):
       query.lower().strip()
       summary = cls.load_index()
       return [item for item in summary if query in item['name'].lower()]

class DayLog():
    """
    Represents a daily plan or actual log of foods, workouts, and supplements.
    """

    # Why:
        # Core to tracking and planning meals/workouts.

    # Interactions:
        # Calls Registry to resolve item IDs.
        # Calls Calculator to total nutrition.

    def __init__(self, date, planned = False):
        pass
    
    def add_item(item_id, category = 'planned'):
        pass
    
    def remove_item(item_id, category = 'planned'):
        pass
    
    def get_total_kcal(category = 'actual'):
        pass
    
    def get_macros(category = 'planned'):
        pass
    
    def adjust_plan():
        pass
    
    def sync_with_registry():
        """Auto-update based on item changes."""
        pass
    
    def save_log():
        pass
    
    def load_log():
        pass

# Working Code
def main():
    # Test = Item("testing", "testing", "1", 2.0, "3")
    # ItemRegistry.delete_item('testing')
    ItemRegistry.update_field('testing', 'name', 'test')

if __name__ == '__main__':
    main()
